trigger:
  branches:
    include:
      - development

variables:
  - group: "innosense-build"
  - name: vmImageName
    value: "ubuntu-latest"
  - name: appName
    value: "chat-service"
  - name: workingDirectory
    value: "./"
  - name: functionAppName
    value: "$(azure-function-app-name-qna-action-service)"
  - name: isDev
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/development')]

parameters:
  - name: ForceDevBuild
    type: boolean
    default: false
    displayName: "Force Development Build"     

stages:
  - stage: Build
    displayName: Build & Artifact

    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)

        steps:
          - bash: |
              if [ -f extensions.csproj ]
              then
                  dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
              fi
            workingDirectory: $(workingDirectory)
            displayName: "Build extensions"

          - task: UsePythonVersion@0
            displayName: "Use Python 3.11"
            inputs:
              versionSpec: 3.11 # Functions V2 supports Python 3.6 as of today

          

          - bash: |
              pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
            workingDirectory: $(workingDirectory)
            displayName: "Install application dependencies"

          - script: |
              echo "Running unit tests"
              source ./.python_packagees/bin/activate
              pip install -r requirements.txt
              pip install pytest pytest-azurepipelines
              pip install pytest-cov
              mkdir htmlcov
              pytest tests --junitxml=junit/test-results.xml --cov=src --cov-report=xml --cov-report=html
            displayName: "Unit tests"

          - task: PublishCodeCoverageResults@1
            displayName: "Publish test results"
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: "$(workingDirectory)/coverage.xml"
              reportDirectory: "$(workingDirectory)/htmlcov"

          - task: PublishTestResults@2
            displayName: "Publish test results"
            inputs:
              testResultsFiles: "**/junit/test-*.xml"
              testRunTitle: "Unit tests"

          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(workingDirectory)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

          - script: |
              cp $(workingDirectory)/.doc/api.yaml $(Build.ArtifactStagingDirectory)/api.yaml
            displayName: "Copying API.yaml"

          - task: UniversalPackages@0
            displayName: "Artifact to Universal Package"
            inputs:
              command: "publish"
              publishDirectory: "$(Build.ArtifactStagingDirectory)"
              vstsFeedPublish: "innosense-feeds"
              vstsFeedPackagePublish: "innosense-$(appName)"
              packagePublishDescription: "Backend Artifact"


# ======================================================= PRODUCTION =======================================================


  - stage: DeployPrd
    displayName: Deploy Prd Stage
    dependsOn: DeployQaqcSuccessNotification
    condition: or(eq('${{ parameters.ForcePrdBuild }}', true), and(succeeded(), eq(variables.isPrd, true)))

    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "production"
        pool:
          vmImage: $(vmImageName)

        variables: 
          - group: "innoveraibot-prd-variables"


        strategy:
          runOnce:
            deploy:
              steps:
                - template: .azure/templates/deployTemplate.yaml
                  parameters:
                    env: "prd"
                    functionAppName: "$(fun-app-name-qna-action-service)"
                    azureSubscription: "$(azure-service-connection-prd)"

  # - stage: DeployPRDAPI
  #   displayName: Deploy Prd APIM APIs
  #   dependsOn: DeployPrd
  #   condition: or(eq('${{ parameters.ForcePrdBuild }}', true), and(succeeded(), eq(variables.isPrd, true)))

  #   jobs:
  #     - job: build
  #       pool:
  #         vmImage: $(vmImageName)
  #       variables: 
  #         - group: "innoveraibot-prd-variables"

  #       steps:
  #         - task: AzureCLI@2
  #           inputs:
  #             azureSubscription: "$(azure-service-connection-prd)"
  #             scriptType: 'bash'
  #             scriptLocation: 'inlineScript'
  #             inlineScript: |
  #               apimServiceName="$(apim-name)"
  #               resourceGroupName="$(azure-resource-group-name)"
  #               apiId="$(apiID)"
  #               specPath='.doc/api.yaml'
  #               az apim api import --specification-format "OpenApi" --specification-path $specPath --path $apiId  --api-id $apiId --resource-group $resourceGroupName --service-name $apimServiceName
  #           displayName: 'Update PRD APIM APIs'